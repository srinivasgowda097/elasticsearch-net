:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/2.3

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/2.x/src/Tests/QueryDsl/BoolDsl/Operators/AndAssignManyManualBoolsUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[and-assign-many-manual-bools-usage]]
== And Assign Many Manual Bools Usage

[source,csharp]
----
var q = Query<Project>.Bool(b => b.MustNot(ATermQuery));

var container = AndAssignManyBoolQueries(q);

container.Bool.MustNot.Should().NotBeEmpty().And.HaveCount(Iterations);

container.Bool.MustNot.Cast<IQueryContainer>().Should().OnlyContain(s => s.Term != null);

AssertBoolQuery(q, b => b.MustNot.Should().NotBeNullOrEmpty());
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Must(ATermQuery));

var container = AndAssignManyBoolQueries(q);

DefaultMustAssert(container);

container.Bool.Must.Cast<IQueryContainer>().Should().OnlyContain(s => s.Term != null);

AssertBoolQuery(q, b => b.Must.Should().NotBeNullOrEmpty());
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Should(ATermQuery).Must(ATermQuery));

var container = AndAssignManyBoolQueries(q);

DefaultMustAssert(container);

container.Bool.Must.Cast<IQueryContainer>().Should()
    .OnlyContain(s => s.Bool != null && s.Bool.Should != null && s.Bool.Must != null);

AssertBoolQuery(q, b => {
    b.Should.Should().NotBeNullOrEmpty();
    b.Must.Should().NotBeNullOrEmpty();
});

b.Should.Should().NotBeNullOrEmpty();

b.Must.Should().NotBeNullOrEmpty();
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Should(ATermQuery).MustNot(ATermQuery));

var container = AndAssignManyBoolQueries(q);

DefaultMustAssert(container);

container.Bool.Must.Cast<IQueryContainer>().Should()
    .OnlyContain(s => s.Bool != null && s.Bool.Should != null && s.Bool.MustNot != null);

AssertBoolQuery(q, b => {
    b.Should.Should().NotBeNullOrEmpty();
    b.MustNot.Should().NotBeNullOrEmpty();
});

b.Should.Should().NotBeNullOrEmpty();

b.MustNot.Should().NotBeNullOrEmpty();
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Must(ATermQuery).MustNot(ATermQuery));

var container = AndAssignManyBoolQueries(q);

DefaultMustAssert(container);

container.Bool.MustNot.Should().NotBeEmpty().And.HaveCount(Iterations);

container.Bool.Must.Cast<IQueryContainer>().Should().OnlyContain(s => s.Term != null);

AssertBoolQuery(q, b => {
    b.Must.Should().NotBeNullOrEmpty();
    b.MustNot.Should().NotBeNullOrEmpty();
});

b.Must.Should().NotBeNullOrEmpty();

b.MustNot.Should().NotBeNullOrEmpty();
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Must(ATermQuery).Name("name"));

var container = AndAssignManyBoolQueries(q);

DefaultMustAssert(container);

container.Bool.Must.Cast<IQueryContainer>().Should()
    .OnlyContain(s => s.Bool != null && s.Bool.Must != null && s.Bool.Name == "name");

AssertBoolQuery(q, b => {
    b.Must.Should().NotBeNullOrEmpty();
    b.Name.Should().NotBeNullOrEmpty();
});

b.Must.Should().NotBeNullOrEmpty();

b.Name.Should().NotBeNullOrEmpty();
----

[source,csharp]
----
var container = new QueryContainer();

Action act = () =>
{
    for (int i = 0; i < Iterations; i++) container &= q;
};

container &= q;

act.ShouldNotThrow();
----

[source,csharp]
----
lotsOfAnds.Should().NotBeNull();

lotsOfAnds.Bool.Should().NotBeNull();

lotsOfAnds.Bool.Must.Should().NotBeEmpty().And.HaveCount(Iterations);
----

[source,csharp]
----
var q = Query<Project>.Bool(b => b.Should(ATermQuery));
var container = AndAssignManyBoolQueries(q);
DefaultMustAssert(container);
container.Bool.Must.Cast<IQueryContainer>().Should().OnlyContain(s => s.Bool != null && s.Bool.Should != null);
AssertBoolQuery(q, b => b.Should.Should().NotBeNullOrEmpty());
----

