:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/2.3

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/2.x/src/Tests/QueryDsl/BoolDsl/Operators/AndOperatorOnManualBoolsUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[and-operator-on-manual-bools-usage]]
== And Operator On Manual Bools Usage

[source,csharp]
----
var oisLeft = ois1 && ois2;

Func<QueryContainerDescriptor<Project>, QueryContainer> lambdaLeft = (s) => lambda1(s) && lambda2(s);

ReturnsBool(oisLeft, lambdaLeft, b =>
{
    var left = (IQueryContainer)b.Must.First();
    var right = (IQueryContainer)b.Must.Last();
    assertLeft(left);
    assertRight(right);
    assertContainer?.Invoke(b);
});

var left = (IQueryContainer)b.Must.First();

var right = (IQueryContainer)b.Must.Last();

assertLeft(left);

assertRight(right);

assertContainer?.Invoke(b);

var oisRight = ois2 && ois1;

Func<QueryContainerDescriptor<Project>, QueryContainer> lambdaRight = (s) => lambda2(s) && lambda1(s);

ReturnsBool(oisRight, lambdaRight, b =>
{
    var left = (IQueryContainer)b.Must.First();
    var right = (IQueryContainer)b.Must.Last();
    assertRight(left);
    assertLeft(right);
    assertContainer?.Invoke(b);
});

var left = (IQueryContainer)b.Must.First();

var right = (IQueryContainer)b.Must.Last();

assertRight(left);

assertLeft(right);

assertContainer?.Invoke(b);
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };

CombineBothWays(
    new BoolQuery { Must = queries, Should = queries }, Query
    , q => q.Bool(b => b.Must(c => c.Query()).Should(c => c.Query())), q=> q.Query()
    , l => l.Bool.Should().NotBeNull()
    , r => r.Term.Should().NotBeNull()
    , b => b.Must.Should().NotBeEmpty().And.HaveCount(2)
);
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };

CombineBothWays(
    new BoolQuery { Must = queries, MustNot = queries }, Query
    , q => q.Bool(b => b.Must(c => c.Query()).MustNot(c => c.Query())), q => q.Query()
    , l => l.Term.Should().NotBeNull()
    , r => r.Term.Should().NotBeNull()
    , b => {
        b.Must.Should().NotBeEmpty().And.HaveCount(2);
        b.MustNot.Should().NotBeEmpty().And.HaveCount(1);
    }
);

b.Must.Should().NotBeEmpty().And.HaveCount(2);

b.MustNot.Should().NotBeEmpty().And.HaveCount(1);
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };

CombineBothWays(
    new BoolQuery { Must = queries }, Query
    , q => q.Bool(b => b.Must(c => c.Query())), q => q.Query()
    , l => l.Term.Should().NotBeNull()
    , r => r.Term.Should().NotBeNull()
    , b => {
        b.Must.Should().NotBeEmpty().And.HaveCount(2);
    }
);

b.Must.Should().NotBeEmpty().And.HaveCount(2);
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };

CombineBothWays(
    new BoolQuery { Should = queries }, Query
    , q => q.Bool(b => b.Should(c => c.Query())), q=> q.Query()
    , l => {
        l.Bool.Should().NotBeNull();
        l.Bool.Should.Should().NotBeNullOrEmpty();
    }
    , r => r.Term.Should().NotBeNull()
    , b => b.Must.Should().NotBeEmpty().And.HaveCount(2)
);

l.Bool.Should().NotBeNull();

l.Bool.Should.Should().NotBeNullOrEmpty();
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };

CombineBothWays(
    new BoolQuery { Should = queries, Name = "name" }, Query
    , q => q.Bool(b => b.Should(c => c.Query()).Name("name")), q=> q.Query()
    , l => {
        l.Bool.Should().NotBeNull();
        l.Bool.Should.Should().NotBeNullOrEmpty();
        l.Bool.Name.Should().Be("name");
    }
    , r => r.Term.Should().NotBeNull()
    , b => b.Must.Should().NotBeEmpty().And.HaveCount(2)
);

l.Bool.Should().NotBeNull();

l.Bool.Should.Should().NotBeNullOrEmpty();

l.Bool.Name.Should().Be("name");
----

[source,csharp]
----
var queries = new QueryContainer[] { Query };
ReturnsBool(
    new BoolQuery { Must = queries, Should = queries }
        && new BoolQuery { MustNot = queries, Should = queries }
    , q => q.Bool(b=>b.Must(c=>c.Query()).Should(c=>c.Query()))
        && q.Bool(b=>b.MustNot(c=>c.Query()).Should(c=>c.Query()))
    , b =>
{

    b.Must.Should().NotBeEmpty().And.HaveCount(2);
    var first = (IQueryContainer)b.Must.First();
    var last = (IQueryContainer)b.Must.Last();
    first.Bool.Should().NotBeNull();
    last.Bool.Should().NotBeNull();

    var firstBool = first.Bool;
    var lastBool = last.Bool;

    firstBool.Should.Should().NotBeEmpty().And.HaveCount(1);
    firstBool.Must.Should().NotBeEmpty().And.HaveCount(1);

    lastBool.Should.Should().NotBeEmpty().And.HaveCount(1);
    lastBool.MustNot.Should().NotBeEmpty().And.HaveCount(1);
});
b.Must.Should().NotBeEmpty().And.HaveCount(2);
var first = (IQueryContainer)b.Must.First();
var last = (IQueryContainer)b.Must.Last();
first.Bool.Should().NotBeNull();
last.Bool.Should().NotBeNull();
var firstBool = first.Bool;
var lastBool = last.Bool;
firstBool.Should.Should().NotBeEmpty().And.HaveCount(1);
firstBool.Must.Should().NotBeEmpty().And.HaveCount(1);
lastBool.Should.Should().NotBeEmpty().And.HaveCount(1);
lastBool.MustNot.Should().NotBeEmpty().And.HaveCount(1);
----

